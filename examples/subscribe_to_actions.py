
from webthing_client.action import ActionType, Action, CreateEventAction, UpdateEventAction, DeleteEventAction
from webthing_client.client import WebthingClient


def callback(action: Action) -> None:
    """Callback for Actions.

    Args:
        property_uri (str): Property (relative) uri | 'things/example.thing/properties/example.property'
        action (Action): Action on Property | '{"timestamp": "2023-01-01T12:00:00.000Z", "value": {<ACTION_TYPE>: {<INPUTS>}}}'
    """
    print(f"Action ({action.TYPE}): {action}")

def subscribe_to_all_actions(webthing_fqdn: str):
    """Subscribe to all Actions on webthing.

    Args:
        webthing_fqdn (str): Fully qualified domain name | 'webthing.example.com'
    """
    client = WebthingClient(webthing_fqdn)
    client.subscribe_actions(callback)

def subscribe_to_type_actions(webthing_fqdn: str):
    """Subscribe to Actions of a specific type on webthing.

    Args:
        webthing_fqdn (str): Fully qualified domain name | 'webthing.example.com'
    """
    client = WebthingClient(webthing_fqdn)
    # Only subscribe to update Event Action type
    client.subscribe_actions(callback, type=ActionType.UpdateEvent)

def subscribe_to_actions_filtered(webthing_fqdn: str):
    """Subscribe to Actions on webthing not generated by own client instance.
    In case of separate instances of WebthingClients Events produced by one will not be filtered out by the other.


    Args:
        webthing_fqdn (str): Fully qualified domain name | 'webthing.example.com'
    """
    client = WebthingClient(webthing_fqdn)
    # Only subscribe to Actions not generated by own instance.
    client.subscribe_actions(callback, filter_created=True)
